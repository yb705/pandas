In [125]: e
Out[125]:
          a         b         c
0  0.224573  0.955411 -1.075299
1 -0.240829  0.121475 -0.106924
2  0.671173  1.431744 -0.586015
In [126]: e.sort_index()#顺序索引排名，升序
Out[126]:
          a         b         c
0  0.224573  0.955411 -1.075299
1 -0.240829  0.121475 -0.106924
2  0.671173  1.431744 -0.586015
In [128]: e.sort_index(ascending=False)#降序
Out[128]:
          a         b         c
2  0.671173  1.431744 -0.586015
1 -0.240829  0.121475 -0.106924
0  0.224573  0.955411 -1.075299
In [130]: e.sort_index(axis=1,ascending=False)#对列索引进行排序
Out[130]:
          c         b         a
0 -1.075299  0.955411  0.224573
1 -0.106924  0.121475 -0.240829
2 -0.586015  1.431744  0.671173
In [131]: e.sort_values(axis=0,by='a')#通过选定参数by，来对行或列的内值进行排序
Out[131]:
          a         b         c
1 -0.240829  0.121475 -0.106924
0  0.224573  0.955411 -1.075299
2  0.671173  1.431744 -0.586015
In [132]: e.sort_values(axis=1,by=0)
Out[132]:
          c         a         b
0 -1.075299  0.224573  0.955411
1 -0.106924 -0.240829  0.121475
2 -0.586015  0.671173  1.431744
In [130]: e.sort_index(axis=1,ascending=False)
Out[130]:
          c         b         a
0 -1.075299  0.955411  0.224573
1 -0.106924  0.121475 -0.240829
2 -0.586015  1.431744  0.671173

In [131]: e.sort_values(axis=0,by='a')
Out[131]:
          a         b         c
1 -0.240829  0.121475 -0.106924
0  0.224573  0.955411 -1.075299
2  0.671173  1.431744 -0.586015
In [138]: e.sort_values(axis=0,by=['a','c'])#通过传递一个表格来进行多列排序
Out[138]:
          a         b         c
1 -0.240829  0.121475 -0.106924
0  0.224573  0.955411 -1.075299
2  0.671173  1.431744 -0.586015
In [148]: a.rank()#排名是指对有效数组从1到有效数据点总数分配名次的操作，默认是平均排名分配
Out[148]:
0    2.0
1    2.0
2    4.0
3    5.0
4    2.0
dtype: float64
In [150]: a.rank(method='first')#通过传递方法参数可以打破平级关系，‘first’就是以观察顺序进行分配
Out[150]:
0    1.0
1    2.0
2    4.0
3    5.0
4    3.0
dtype: float64
