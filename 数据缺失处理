#规约型方法
In [8]: a
Out[8]:
         a        b         c         d
0      NaN  0.28039  1.121381  0.049086
1      NaN  1.63423       NaN  0.215143
2  2.52675      NaN       NaN       NaN
In [9]: a.sum()#忽略nan，相加
Out[9]:
a    2.526750
b    1.914621
c    1.121381
d    0.264229
dtype: float64
In [10]: a.mean()#忽略nan，求平均
Out[10]:
a    2.526750
b    0.957310
c    1.121381
d    0.132115
dtype: float64
In [12]: a.mean(axis=1)
Out[12]:
0    0.483619
1    0.924687
2    2.526750
dtype: float64
In [14]: a.idxmax()#每列数值最大的元素的索引
Out[14]:
a    2
b    1
c    0
d    1
dtype: int64
In [15]: a.idxmax(axis=1)#每行数值最大的元素的索引
Out[15]:
0    c
1    b
2    a
dtype: object
In [16]: a.idxmin()#每列数值最小的元素的索引
Out[16]:
a    2
b    0
c    0
d    0
dtype: int64
#累积型方法
In [18]: a
Out[18]:
         a        b         c         d
0      NaN  0.28039  1.121381  0.049086
1      NaN  1.63423       NaN  0.215143
2  2.52675      NaN       NaN       NaN
In [17]: a.cumsum()#自上而下的累积相加
Out[17]:
         a         b         c         d
0      NaN  0.280390  1.121381  0.049086
1      NaN  1.914621       NaN  0.264229
2  2.52675       NaN       NaN       NaN
In [19]: a.describe()#数值型汇总统计
Out[19]:
             a         b         c         d
count  1.00000  2.000000  1.000000  2.000000
mean   2.52675  0.957310  1.121381  0.132115
std        NaN  0.957309       NaN  0.117420
min    2.52675  0.280390  1.121381  0.049086
25%    2.52675  0.618850  1.121381  0.090600
50%    2.52675  0.957310  1.121381  0.132115
75%    2.52675  1.295770  1.121381  0.173629
max    2.52675  1.634230  1.121381  0.215143
In [21]: b=pd.DataFrame({'e':['a','b','c','d'],'f':['g','h','i','j'],'l':['m','
    ...: n','o','p']})
In [22]: b
Out[22]:
   e  f  l
0  a  g  m
1  b  h  n
2  c  i  o
3  d  j  p
In [23]: b.describe()#字符型数值统计
Out[23]:
        e  f  l
count   4  4  4
unique  4  4  4
top     a  i  o
freq    1  1  1
